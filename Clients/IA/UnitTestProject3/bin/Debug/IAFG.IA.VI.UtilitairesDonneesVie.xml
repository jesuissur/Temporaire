<?xml version="1.0"?>
<doc>
<assembly>
<name>
IAFG.IA.VI.UtilitairesDonneesVie
</name>
</assembly>
<members>
<member name="P:IAFG.IA.VI.UtilitairesDonneesVie.My.Resources.Resources.ResourceManager">
	<summary>
  Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
</summary>
</member><member name="P:IAFG.IA.VI.UtilitairesDonneesVie.My.Resources.Resources.Culture">
	<summary>
  Remplace la propriété CurrentUICulture du thread actuel pour toutes
  les recherches de ressources à l'aide de cette classe de ressource fortement typée.
</summary>
</member><member name="T:IAFG.IA.VI.UtilitairesDonneesVie.My.Resources.Resources">
	<summary>
  Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
</summary>
</member><member name="T:IAFG.IA.VI.UtilitairesDonneesVie.RetourCapital">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirSommeDesComptesParVehicule(IAFG.IA.VI.AF.Proposition.Fonds,System.String)">
	<summary>
 Fonction qui retour le solde des comptes pour véhicule spécifié
 </summary>
	<param name="oFonds">Le type de fonds. Soit Capitalisation ou Transitoire</param>
	<param name="vehicule">Le nom du DIA</param>
	<returns>Le solde</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirMoyennePondereeDesComptesParVehicule(IAFG.IA.VI.AF.Proposition.Fonds,System.String)">
	<summary>
 Fonction qui retour la moyenne pondérée des comptes pour véhicule spécifié
 </summary>
	<param name="oFonds">Le fonds. Soit Capitalisation ou Transitoire</param>
	<param name="vehicule">Le nom du DIA</param>
	<returns>La moyenne pondérée</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirInfosComptesPasDIA(IAFG.IA.VI.AF.Proposition.Fonds,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@)">
	<summary>
 retourne un dictionnaire indexé des comptes qui ne sont pas reliés à un DIA
 </summary>
	<param name="oFonds">Le fonds (Capitalisation ou Transitoire)</param>
	<param name="listCmpt">La liste des comptes</param>
	<param name="listSolde">La liste des sommes des soldes des comptes pour le véhicule du compte</param>
	<param name="listTaux">La liste des taux des comptes</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirInfosComptesPasDIA(IAFG.IA.VI.AF.Proposition.Fonds)">
	<summary>
 retourne une list des comptes qui ne sont pas reliés à un DIA
 </summary>
	<param name="oFonds">Le fonds (Capitalisation ou Transitoire)</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirVehiculeCompteIRIS2(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtient le vehicule du compte collatéral IRIS2. Il est obligatoire si l'on a un prêt ou une avance IRIS de la génération 2.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirListeCompteIRIS2(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtient la liste des comptes collatéral IRIS2. Il est obligatoire si l'on a un prêt ou une avance IRIS de la génération 2.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IsContractantCorp(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Cette fonction permet de déterminer si le contractant dans l'illustration est une corporation.
 </summary>
	<returns>True cont = Corporation
 False cont = individus</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirTableauIndividuId(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtenir un tableau contenant les identifiant des individus de la proposition
 </summary>
	<param name="proposition">Proposition pour laquelle obtenir les individus</param>
	<returns>Tableau des identifiant des individus</returns>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirTableauIndividuObjet(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtenir un tableau contenant les objets d'individus
 </summary>
	<param name="proposition">Proposition pour laquelle obtenir les individus</param>
	<returns>Tableau des objets d'individus</returns>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IsOwnerOnly(IAFG.IA.VI.AF.Proposition.Proposition,System.String)">
	<summary>
 Retourne Vrai si l'individu n'est pas assuré, mais seulement contractrant
 </summary>
	<param name="proposition">Proprosition que l'on fouille</param>
	<param name="idIndividu">L'individu que l'on vérifie.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IsOwnerOnly(IAFG.IA.VI.AF.Proposition.Proposition,System.String,IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Retourne Vrai si l'individu n'est pas assuré, mais seulement contractrant
 </summary>
	<param name="proposition">Proprosition que l'on fouille</param>
	<param name="idIndividu">L'individu que l'on vérifie.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.PresenceCaracteresInvalides(System.String,System.String)">
	<summary>
 Cette fonction indique s'il y a des caractères non permis dans le nom, prénom, initiale et nom de cie
 </summary>
	<returns>Indicateur de présence d'un caractère invalide</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirIndividusNoAssure(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32)">
	<summary>
 fonction qui obtient les individus reliés au numéro d'assuré ordinal, que l'assuré soit supprimé (en EVIA) ou non
 </summary>
	<param name="oPropo"></param>
	<param name="noAssure"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.AssureEstSupprime(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32)">
	<summary>
 Permet de savoir si un individu est supprimé
 </summary>
	<param name="noAssure">le numéro ordinal d'assuré</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.AssureEstSurprime(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32)">
	<summary>
 Permet de savoir si un individu est supprimé
 </summary>
	<param name="noAssure">le numéro ordinal d'assuré</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie">
	<summary>
 Classe renfermant des méthodes utilitaires pour les individus
 </summary>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirCodePlan(IAFG.IA.VI.AF.Proposition.Protection,IAFG.IA.VI.AF.Illustration.Scenario,IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept)">
	<summary>
 Fonctione permettant d'obtenir le code de plan à partir d'une protection et d'un concept voulu
 Le concept n'est pas obligatoirement celui actuellement sur le scenario !
 </summary>
	<param name="prot">La protection pour laquel obtenir le plan</param>
	<param name="oScenario">Le scenario pour lequel obtenir le plan</param>
	<param name="concept">Le concept Voulue</param>
	<returns>Le code de plan</returns>
	<remarks>Si la protection est en vigueur, le code de plan ne change pas !</remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirReglesPretIris(IAFG.IA.VI.AF.Proposition.ENUMs.TypePret,System.String,IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtient l'objet PU_ReglesPret du compte IRIS lié au type de prêt sur le plan.
 </summary>
	<param name="typePret"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirReglesPretIris(IAFG.IA.VI.AF.Proposition.ENUMs.TypePret,IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtient l'objet PU_ReglesPret du compte IRIS lié au type de prêt.
 </summary>
	<param name="typePret"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirReglesPretIris(IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept,System.String,IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtient l'objet PU_ReglesPret du compte IRIS lié au type de prêt du concept et du plan.
 </summary>
	<param name="typeConcept"></param>
	<param name="plan"></param>
	<param name="propo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirReglesPretIris(IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept,IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtient l'objet PU_ReglesPret du compte IRIS lié au type de prêt du concept.
 </summary>
	<param name="typeConcept"></param>
	<param name="propo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirCompteDisponible(IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept,IAFG.IA.VI.AF.Proposition.Proposition,System.String)">
	<summary>
 Obtenir le compte disponible dans le PDF selon le prêt du concept de du vehicule.
 </summary>
	<param name="typeConcept"></param>
	<param name="propo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirListeComptesDisponible(IAFG.IA.VI.AF.Proposition.ENUMs.TypePret,IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtenir la liste des comptes disponibles dans le PDF à partir du type de prêt.
 </summary>
	<param name="typePret"></param>
	<param name="propo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirListeComptesDisponible(IAFG.IA.VI.AF.Proposition.ENUMs.TypePret,System.String,IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtenir la liste des comptes disponibles dans le PDF à partir du type de prêt et d'un plan.
 </summary>
	<param name="typePret"></param>
	<param name="plan"></param>
	<param name="propo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirListeComptesDisponible(IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept,System.String,IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtenir la liste des comptes disponibles dans le PDF à partir du type de prêt du concept et d'un plan.
 </summary>
	<param name="typeConcept"></param>
	<param name="plan"></param>
	<param name="propo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirListeComptesDisponible(IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept,IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Obtenir la liste des comptes disponibles dans le PDF à partir du type de prêt du concept.
 </summary>
	<param name="typeConcept"></param>
	<param name="propo"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.PresenceIndividuMontant10Millions(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Fonction qui retourne si oui ou non il y a au moins un assuré qui a un capital assuré de plus de 20 000 000 $
 </summary>
	<param name="oPropo">La propo</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ConvertirConceptEnConceptPermis(IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept)">
	<summary>
 Fonction qui converti le concept reçu en paramètre en ConceptsPermis
 </summary>
	<param name="concept"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.RenumeroterProtections(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Méthode qui renumérote les numéros d'assurés suite à une suppresion de protections
 </summary>
	<param name="oPropo"></param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.SansChargeAuRachat(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Fonction qui retour true s'il n'y a pas de charge au Rachat
 </summary>
	<param name="oPropo"></param>
	<returns></returns>
	<remarks>On est sans charge au rachat si le flag Iris Extra est actif ou si on est iris 6 et plus</remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirAvenantTransformation(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Fonction qui returne si l'avenant de transformation indiv à cjt est présent
 </summary>
	<param name="oPropo">la proposition</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetDateTransformationIndACjtPrevue(IAFG.IA.VI.AF.Proposition.Protection,System.Int32)">
	<summary>
 Méthode qui retourne la bonne date de transformation selon l'année reçu en paramètre.
 </summary>
	<param name="oProtection"></param>
	<param name="annee"></param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetAnneeTransformationIndivACjtPrevue(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Méthode qui retourne l'année de transformation de l'avenant indiv. à cjt
 </summary>
	<param name="oProtection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirDescriptions(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Fonction qui retourne toutes les descriptions possibles pour un plan
 </summary>
	<param name="oProt">la protection pour laquelle on veut une description</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirDescriptions(System.String)">
	<summary>
 Fonction qui retourne toutes les descriptions possibles pour un plan
 </summary>
	<param name="plan">le plan pour lequel on veut une description</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.DecortiquerPlanIllusMultiterme(IAFG.IA.IL.AP.Illustration.ENUMs.PlanIllustration)">
	<summary>
 fonction qui décortique un plan illus et nous retourne le type de capital et la duree
 </summary>
	<param name="planIllus"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirConceptPlusExtra(IAFG.IA.VI.AF.Illustration.Scenario,System.Boolean@,System.Boolean@,System.Boolean@)">
	<summary>
 Méthode qui affecte les paramètres plus et extra selon les choix dans le concept TypeConcept
 </summary>
	<param name="oScenario"></param>
	<param name="plus"></param>
	<param name="extra"></param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirGammeEnCours(IAFG.IA.VI.AF.Illustration.Scenario,IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept)">
	<summary>
 Fonction qui retourne la GammeId (Produit) en cours
 </summary>
	<param name="oScenario"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ProtectionEstSurprimee(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 retourne si oui ou non la protection passée en paramètre est surprimée
 </summary>
	<param name="oProt">La protection</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.AffecterTypeAssurance(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32,IAFG.IA.VI.AF.Proposition.ENUMs.TypeAssurance)">
	<summary>
 Méthode qui affecte l'âge équivalent passé en paramètre à toutes les protections
 nécessaires
 </summary>
	<param name="oPropo">un pointeur sur l'objet de Proposition</param>
	<param name="numeroAssure">Le numéro d'assuré ordinal sur lequel affecte l'âge</param>
	<param name="typeAssurance">le nouveau type d'assurance</param>
	<remarks>Ajouter le statut de la protection (Nouveau, ajouter, en vigueur) et la date d'émission pour EVIA</remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.SupprimerAvenants(System.String)">
	<summary>
 Méthode qui supprime les avenants de la protection de base passée en paramètre
 TODO AL: Remplacer le nom de cette fonction par SupprimerProtectionLieeSaufGarantie
 Cette méthode porte mal son nom car peut supprimer plus que juste les Avenants.
 Je donc redirigé vers la nouvelle fonction SupprimerProtectionsLiees tout en reproduisant le comportement actuel.
 Seul les garanties n'était pas supprimer car il n'était pas lié avant les changements apportés par le projet Evia.
 </summary>
	<param name="idBase">L'id de la protection de base</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.SupprimerProtectionLieeSaufGarantie(System.String)">
	<summary>
 Méthode qui supprime les protections liee à la protection mère passée en paramètre sauf les garantie
 </summary>
	<param name="idBase"></param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.SupprimerProtectionsLiees(System.String)">
	<summary>
 Méthode qui supprime les protections Liées, par la propriété LienProtectionBase, à la protection de base passée en paramètre
 </summary>
	<param name="idBase">L'id de la protection de base</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.SupprimerProtectionsLiees(System.String,System.Collections.Generic.ICollection{IAFG.IA.VI.AF.PDF.ENUMs.CodeProtection})">
	<summary>
 Méthode qui supprime les protections Liées, par la propriété LienProtectionBase, à la protection de base passée en paramètre selon une liste de CodeProtection
 </summary>
	<param name="idBase">L'id de la protection de base</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.SupprimerProtectionsLiees(System.String,IAFG.IA.VI.AF.PDF.ENUMs.CodeProtection)">
	<summary>
 Méthode qui supprime les protections Liées, par la propriété LienProtectionBase, à la protection de base passée en paramètre selon le CodeProtection
 </summary>
	<param name="idBase">L'id de la protection de base</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirProduitBase(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Fonction qui obtient la GammeSpecifique de la première protection de l'illustration
 </summary>
	<param name="oPropo">un pointeur sur la Propo</param>
	<returns>la GammeSpecifique de la première protection de l'illustration</returns>
	<remarks>utilisé dans Transition</remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirProduitProtection(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Fonction qui obtient la GammeSpecifique de la protection en paramètre
 </summary>
	<param name="oProtection">un pointeur sur la protection</param>
	<returns>la GammeSpecifique de la protection en paramètre</returns>
	<remarks>utilisé dans Transition</remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ValiderPrestationTotale(IAFG.IA.VI.AF.Proposition.Protection,System.Decimal,System.Decimal@,System.String@,System.String)">
	<summary>
	</summary>
	<param name="protection">l'objet de la proposition de l'item modifié</param>
	<param name="data">le nombre entré</param>
	<param name="montantDispo">le montant disponible</param>
	<returns>True = le montant entré est valide, False = le montant entré n'est pas valide</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetMontantAssInvIndividu(System.String,IAFG.IA.VI.AF.Proposition.Protection,System.Boolean)">
	<summary>
 Cette fonction retourne le montant d'ass inv pour l'individu passé en param
 </summary>
	<param name="pIdIndividu">l'id de l'individu</param>
	<param name="oProtection">objet de la protection a exclure si exclus est a true</param>
	<param name="pExclus">si on exlcus la protection pIdProtection</param>
	<returns>le montant d'ass inv pour l'individu passé en param</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ProtectionAssureGet(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Permet d'aller chercher les ID des assurés d'une protection
 </summary>
	<param name="oProtection">la protection</param>
	<returns>La liste des Id des assurés d'une protection</returns>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.DetermineAssEligibleGarContrCorp(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Cette fonction determine les individus qui sont éligible pour
 la garantie du contractant corporatif et retourne une liste
  contenant l'identifiant de chaque individu éligible
 </summary>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ProtectionAssureSet(IAFG.IA.VI.AF.Proposition.Protection,System.Collections.Generic.List{System.String},System.Boolean)">
	<summary>
 Permet d'initialiser les assurés d'une protection
 </summary>
	<param name="protection">Protection pour lequel attribuer l'assuré</param>
	<param name="idAssures">Identifiant des assurés</param>
	<param name="remplacement">Est-ce qu'on l'on remplace</param>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ProtectionAssureSet(IAFG.IA.VI.AF.Proposition.Protection,System.String[],System.Boolean)">
	<summary>
 Permet d'initialiser les assurés d'une protection (Surcharge pour accepter un tableau d'identifiant)
 </summary>
	<param name="protection">Protection pour lequel attribuer l'assuré</param>
	<param name="idAssures">Identifiant des assurés</param>
	<param name="remplacement">Est-ce qu'on l'on remplace</param>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ProtectionExtract(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32,System.String)">
	<summary>
 Extraction d'une protection
 </summary>
	<param name="laProposition">Proposition de laquelle extraire la protection</param>
	<param name="numeroAssure">Numéro d'assuré</param>
	<param name="type">Type de protection</param>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ProtectionSurprimesGet(IAFG.IA.VI.AF.Proposition.Protection,System.String)">
	<summary>
 Permet d'obtenir le id de la surprime pour une protection et un assuré donné
 </summary>
	<param name="protection">la protection</param>
	<param name="idAssure">Numéro d'identification de l'assuré</param>
	<returns>La liste des surprimes de l'assuré passé en paramètre</returns>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetNbAssurables(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Retourne le nombre d'assurés assurables pour l'illustration au complet
 </summary>
	<param name="protection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetNbAssuresIllus(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Retourne le nombre d'assurés pour l'illustration au complet
 </summary>
	<param name="protection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetNbrProtLieePasGarantie(IAFG.IA.VI.AF.Proposition.Proposition,System.String)">
	<summary>
 Cette fonction retourne le nombre de protections associées à une protection
 TODO AL: Changer le nom de cette fonction pour GetNbrProtLieePasGarantie
 Les garanties n'était pas lier par le principe de lienProtectionBase avant une modification dans le cadre du projet Evia.
 Cette méthode porte mal son nom car elle ne doit pas retourner les garanties.
 </summary>
	<param name="oPropo">un pointeur sur l'objet de Proposition</param>
	<param name="IdProtection">Id de la protection</param>
	<returns>le nombre de protections associées</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetNbrProtAssocie(IAFG.IA.VI.AF.Proposition.Proposition,System.String,System.Collections.Generic.ICollection{IAFG.IA.VI.AF.PDF.ENUMs.CodeProtection})">
	<summary>
 Cette fonction retourne le nombre de protections associées à une protection selon la list de CodeProtection
 </summary>
	<param name="oPropo">un pointeur sur l'objet de Proposition</param>
	<param name="IdProtection">Id de la protection</param>
	<returns>le nombre de protections associées</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetNbrProtAssocie(IAFG.IA.VI.AF.Proposition.Proposition,System.String,IAFG.IA.VI.AF.PDF.ENUMs.CodeProtection)">
	<summary>
 Cette fonction retourne le nombre de protections associées à une protection selon le codeProtection
 </summary>
	<param name="oPropo">un pointeur sur l'objet de Proposition</param>
	<param name="IdProtection">Id de la protection</param>
	<returns>le nombre de protections associées</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ProtectionsIndividu(IAFG.IA.VI.AF.Proposition.Proposition,System.String,IAFG.IA.VI.AF.Proposition.ENUMs.TypeProtection,IAFG.IA.VI.AF.Proposition.ENUMs.EtatProtection,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Permet d'obtenir les protections d'un individu
 </summary>
	<param name="idIndividu">Id de l'individu ou "Conjoint"</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IndividuHospitalisation(IAFG.IA.VI.AF.Proposition.Proposition,System.String,System.String@)">
	<summary>
 Permet de déterminer si un individu détient un avenant  Hospitalisation
 </summary>
	<param name="idIndividu">Id de l'individu</param>
	<param name="idProtection">L'identifiant de la protection RA</param>
	<returns>True si l'individu à une avenant Hospitalisation</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IndividuHospitalisationDom(IAFG.IA.VI.AF.Proposition.Proposition,System.String,System.String@)">
	<summary>
 Permet de déterminer si un individu détient un avenant  Hospitalisation Domicile
 </summary>
	<param name="idIndividu">Id de l'individu</param>
	<param name="idProtection">L'identifiant de la protection RA</param>
	<returns>True si l'individu à une avenant Hospitalisation Domicile</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IndividuRevenuAppoint(IAFG.IA.VI.AF.Proposition.Proposition,System.String,System.String@)">
	<summary>
 Permet de déterminer si un individu détient un avenant  Revenu d'appoint
 </summary>
	<param name="idIndividu">Id de l'individu</param>
	<param name="idProtection">L'identifiant de la protection RA</param>
	<returns>Si l'individu à une avenant Revenu d'appoint</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IndividuGarantieAssurabilite(IAFG.IA.VI.AF.Proposition.Proposition,System.String,System.String@)">
	<summary>
 Permet de déterminer si un individu détient un avenant Garantie Assurabilité
 </summary>
	<param name="idIndividu">Id de l'individu</param>
	<param name="idProtection">L'identifiant de la protection GA</param>
	<returns>Si l'individu a ou pas une GA</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.AfficherMsgProtectionSurprime(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Cette fonction retourne si on doit ou non afficher le message couvr018a
 </summary>
	<param name="oProt">la protection qui vient d'être modifier (surprimes)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirCodePlan(IAFG.IA.IL.AP.Illustration.ENUMs.PlanIllustration,IAFG.IA.VI.AF.Illustration.Scenario,IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept)">
	<summary>
 Fonctione permettant d'obtenir le code de plan à partir d'un plan illus
 </summary>
	<param name="planIllus">Le plan illus pour lequel obtenir le plan</param>
	<param name="oScenario">Le scenario pour lequel obtenir le plan</param>
	<param name="ConceptCourant">Le concept courant, malheureusement nous ne pouvons pas le déterminer à partir du scénario car nous utilisons "aucun" pour tous les concepts illustration régulière.</param>
	<returns>Le code de plan</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirCodePlan(IAFG.IA.VI.AF.Proposition.Protection,IAFG.IA.IL.AP.Illustration.ENUMs.PlanIllustration,IAFG.IA.VI.AF.Illustration.Scenario,IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept)">
	<summary>
 Fonctione permettant d'obtenir le code de plan à partir d'un plan illus
 </summary>
	<param name="oProtBase">Protection de base pour laquelle la protection dont nous voulons obtenir le code de plan est lier</param>
	<param name="planIllus">Le plan illus pour lequel obtenir le plan</param>
	<param name="oScenario">Le scenario pour lequel obtenir le plan</param>
	<param name="ConceptCourant">Le concept courant, malheureusement nous ne pouvons pas le déterminer à partir du scénario car nous utilisons "aucun" pour tous les concepts illustration régulière.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirCodePlan(IAFG.IA.VI.AF.Proposition.Protection,IAFG.IA.IL.AP.Illustration.ENUMs.PlanIllustration,IAFG.IA.VI.AF.Illustration.Scenario,IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept,IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Fonctione permettant d'obtenir le code de plan à partir d'un plan illus
 </summary>
	<param name="oProtBase">Protection de base pour laquelle la protection dont nous voulons obtenir le code de plan est lier</param>
	<param name="planIllus">Le plan illus pour lequel obtenir le plan</param>
	<param name="oScenario">Le scenario pour lequel obtenir le plan</param>
	<param name="ConceptCourant">Le concept courant, malheureusement nous ne pouvons pas le déterminer à partir du scénario car nous utilisons "aucun" pour tous les concepts illustration régulière.</param>
	<param name="oProt">Protection pour laquelle nous voulons obtenir le code de plan</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirCodePlan(IAFG.IA.IL.AP.Illustration.ENUMs.PlanIllustration,IAFG.IA.VI.AF.Illustration.Scenario,IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept,System.Int32)">
	<summary>
 Fonctione permettant d'obtenir le code de plan à partir d'un plan illus
 </summary>
	<param name="planIllus">Le plan illus pour lequel obtenir le plan</param>
	<param name="oScenario">Le scenario pour lequel obtenir le plan</param>
	<param name="ConceptCourant">Le concept courant, malheureusement nous ne pouvons pas le déterminer à partir du scénario car nous utilisons "aucun" pour tous les concepts illustration régulière.</param>
	<returns>Le code de plan</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirCodePlan(IAFG.IA.IL.AP.Illustration.ENUMs.PlanIllustration,IAFG.IA.VI.AF.Illustration.Scenario,IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept,IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Fonctione permettant d'obtenir le code de plan à partir d'un plan illus
 </summary>
	<param name="planIllus">Le plan illus pour lequel obtenir le plan</param>
	<param name="oScenario">Le scenario pour lequel obtenir le plan</param>
	<param name="ConceptCourant">Le concept courant, malheureusement nous ne pouvons pas le déterminer à partir du scénario car nous utilisons "aucun" pour tous les concepts illustration régulière.</param>
	<returns>Le code de plan</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirCodePlan(IAFG.IA.IL.AP.Illustration.ENUMs.PlanIllustration,IAFG.IA.VI.AF.Illustration.Scenario,IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept,IAFG.IA.VI.AF.Proposition.Protection,System.Int32)">
	<summary>
 Fonctione permettant d'obtenir le code de plan à partir d'un plan illus
 </summary>
	<param name="planIllus">Le plan illus pour lequel obtenir le plan</param>
	<param name="oScenario">Le scenario pour lequel obtenir le plan</param>
	<param name="ConceptCourant">Le concept courant, malheureusement nous ne pouvons pas le déterminer à partir du scénario car nous utilisons "aucun" pour tous les concepts illustration régulière.</param>
	<param name="oProt">Protection pour laquelle nous voulons obtenir le code de plan</param>
	<returns>Le code de plan</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirCodePlan(IAFG.IA.IL.AP.Illustration.ENUMs.PlanIllustration,IAFG.IA.VI.AF.Illustration.Scenario,IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept,IAFG.IA.VI.AF.Proposition.Protection,IAFG.IA.VI.AF.Proposition.Protection,System.Int32)">
	<summary>
 Fonctione permettant d'obtenir le code de plan à partir d'un plan illus
 </summary>
	<param name="planIllus">Le plan illus pour lequel obtenir le plan</param>
	<param name="oScenario">Le scenario pour lequel obtenir le plan</param>
	<param name="ConceptCourant">Le concept courant, malheureusement nous ne pouvons pas le déterminer à partir du scénario car nous utilisons "aucun" pour tous les concepts illustration régulière.</param>
	<param name="oProt">Protection pour laquelle nous voulons obtenir le code de plan</param>
	<returns>Le code de plan</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirPlanIllustrationPourCategorie(IAFG.IA.IL.AP.Illustration.ENUMs.PlanIllustration)">
	<summary>
 Permet d'obtenir le premier PlanIllus pour un PlanIllusCategorie
 </summary>
	<param name="PlanIllusCategorie"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirCodePlanTransition(IAFG.IA.IL.AP.Illustration.ENUMs.PlanIllustration,IAFG.IA.VI.AF.Illustration.Scenario,IAFG.IA.VI.AF.Proposition.Protection,System.Int32,IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept)">
	<summary>
 Méthode qui retourne le code de plan de Transition selon les paramètres passés
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.CalculerMontantComparaison(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Fonction qui calcul le montant qui servira à la comparaison avec un plan temporaire
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirAnneeProjection(IAFG.IA.VI.AF.Proposition.Proposition,System.DateTime)">
	<summary>
 Obtient l'année de la projection de la date passée en paramètre
 </summary>
	<param name="oPropo">un pointeur sur la proposition</param>
	<param name="dateProjection">la date</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IrisExtraActif(IAFG.IA.VI.AF.Illustration.Scenario)">
	<summary>
 Fonction qui permet de savoir si Iris Extra est actif
 </summary>
	<param name="scenario"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.FlagDeuxGenesis">
	<summary>
 Permet de setter le flag à savoir si on permet deux Genesis sur le même assuré dans l'application.
 </summary>
	<value>Le flag des 2 genesis.</value>
	<returns>Le flag des 2 genesis.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirObjet(System.String)">
	<summary>
 Nous retourne l'objet représenté par l'id passé en paramètre.
 </summary>
	<param name="Id">L'id pour lequel on veut obtenir l'objet.</param>
	<returns>L'objet pour lequel on a passé l'ID.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObjetExiste(System.String)">
	<summary>
 Nous retourne si l'objet représenté par l'id passé en paramètre existe
 </summary>
	<param name="Id">L'id de l'objet dont l'on veut vérifier l'existance</param>
	<returns>True ou False</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.PresenceAssurePasContractant(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Fonction qui retourne si il y a présence d'un assuré qui n'est pas contractant
 </summary>
	<param name="oPropo">un pointeur sur la proposition</param>
	<returns>True = Présence d'un assuré non contractant, False = Absence d'assuré non contractant</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetAssureProtectionTrad(System.Int32,System.String[]@,System.Int32@,IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Cette fonction permet d'obtenir la liste des protections de l'assuré
 passé en paramètre dans l'ordre. C'est à dire que le protections
 enfant seront à la suite de la protections mère.
 </summary>
	<param name="numeroAssure">Le numéro ordinal de l'assuré</param>
	<param name="idProtections">Le tableau contenant les protections</param>
	<param name="nbrProtections">Le nombre de protection retournées</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.NombreAssureAssurable(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Fonction qui retourne le nombre d'assures assurable
 </summary>
	<param name="oPropo">un pointeur sur la proposition</param>
	<returns>Le nombre d'assures assurable</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.PresenceContractantPasAssure(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Fonction qui retourne si il y a présence d'un contractant qui n'est pas assuré
 </summary>
	<param name="oPropo">un pointeur sur la proposition</param>
	<returns>True = Présence d'un contractant non assuré, False = Absence de contractant non assuré</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirMontantTotalMG(IAFG.IA.VI.AF.Proposition.Proposition,System.String)">
	<summary>
 Fonction qui retourne le montant total de Maladide Grave de l'individu passé en paramètre
 </summary>
	<param name="oPropo">un pointeur sur la proposition</param>
	<param name="idIndividu">l'individu pour lequel on veut le montant total MG</param>
	<returns>Le montant total de Maladie Grave</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IsIndividuSurprimee(IAFG.IA.VI.AF.Proposition.Proposition,System.String,System.Boolean,System.Boolean)">
	<summary>
 Permet de déterminer si un individu est surprimee
 </summary>
	<param name="individuId">Id de l'individu ou "Conjoint"</param>
	<param name="incluGarContr">Indique si nous devons inclure les garanties du contractant dans la vérification</param>
	<param name="incluBaseCj">Indique si nous devons inclure les protections sur base conjointe dans la vérification.</param>
	<returns>True - L'individu à une protection surprimée
 False - L'individu n'a aucune protection surprimée</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetAge(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32,System.String)">
	<summary>
 Cette fonction petmet de retourné l'âge Min ou Max de l'assuré selon le paramètre minOuMax.
 </summary>
	<param name="minOuMax">Min ou Max</param>
	<returns>L'âge de l'assuré</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetAgeIllus(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32)">
	<summary>
 Cette fonction petmet de retourné l'âge de l'assuré. Si nous
  sommes en assurance conjointe et que le type de protection
 est "Conjointe au premier décès" alors nous retournons l'âge du
 plus vieux des assurés conjoint. Si le type de protection
 est "Conjointe au dernier décès" alors nous retournons l'âge du
 plus jeune des assurés conjoint
 </summary>
	<returns>l'âge de l'assuré</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.GetEsperanceVie(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32)">
	<summary>
 Cette fonction petmet de retourné l'espérance de vie de l'assuré. Si nous
  sommes en assurance conjointe et que le type de protection
 est "Conjointe au premier décès" alors nous retournons l'espérance de vie du
 plus vieux des assurés conjoint. Si le type de protection
 est "Conjointe au dernier décès" alors nous retournons l'espérance de vie du
 plus jeune des assurés conjoint
 </summary>
	<returns>l'âge de l'assuré</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.MiseAJourTypeCout(IAFG.IA.VI.AF.Proposition.Protection,IAFG.IA.IL.AF.Illustration.ENUMs.TypeMortaliteIllustration,System.Int32,System.String)">
	<summary>
 Cette fonction retourne le type de coût par défaut selon
 la prestation au décès ou le type de coûts au départ si
 celui-ci est un type de coûts avec option de paiement rapide.
 </summary>
	<param name="typeCoutDepart">Le type de cout au départ.</param>
	<param name="age">L'âge de l'assuré ou l'âge équivalent en ass. conj.</param>
	<param name="codePlanOption">Le code de plan de l'option que l'usager à choisi sur cette protection</param>
	<returns>Le type de coût par défaut.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirAgeDureeProtection(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Retourne l'age à utilisé pour calculer la durée d'une protection(plus vieux ou plus jeune dépendant du type de conjoint)
 </summary>
	<param name="objetProtection">La protection pour laquelle obtenir cet age.</param>
	<returns>L'age à utiliser pur le calcul de la durée.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirSuprimesAssure(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32,System.Boolean)">
	<summary>
 Permet de nous donner la liste des suprimes sur un assure
 </summary>
	<param name="proposition">Objet de la proposition</param>
	<param name="noAssure">Numero de l'assure.</param>
	<param name="incluGarContr">Indique si nous devons inclure les garanties du contractant dans la vérification</param>
	<returns>Une liste des suprimes sur l'assure.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirSuprimesIndividu(IAFG.IA.VI.AF.Proposition.Proposition,System.String,System.Boolean)">
	<summary>
 Permet de nous donner la liste des suprimes sur un individu
 </summary>
	<param name="proposition">Objet de la proposition</param>
	<param name="idIndividu">Numero de l'assure.</param>
	<param name="incluGarContr">Indique si nous devons inclure les garanties du contractant dans la vérification</param>
	<returns>Une liste des suprimes sur l'individu.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.MinimisationActive(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Permet de savoir si la minimisation est active pour les cas en vigueur.
 </summary>
	<param name="proposition"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.MinimisationActive(IAFG.IA.VI.AF.Proposition.Proposition,System.Boolean)">
	<summary>
 Permet de savoir si la minimisation est active pour les cas en vigueur.
 </summary>
	<param name="proposition"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.CalculerDureeMinimisation(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Détermine la valeur maximale permise pour la durée de nivellement de la protection courante.
 </summary>
	<param name="oProtection">La protection pour laquelle calculer la duree de minimisation</param>
	<returns>La valeur maximale permise pour la durée de nivellement cette protection.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirDureeAvantMinimisationCapital(IAFG.IA.VI.AF.Proposition.Proposition,System.Boolean)">
	<summary>
 Renvoit la durée en année avant la minisation du capital
 </summary>
	<param name="propo">Référence un <see cref="T:IAFG.IA.VI.AF.Proposition.Proposition">Proposition</see> contenant les données du contrat projeté.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirDureeAvantMinimisationCapital(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Renvoit la durée en année avant la minisation du capital
 </summary>
	<param name="propo">Référence un <see cref="T:IAFG.IA.VI.AF.Proposition.Proposition">Proposition</see> contenant les données du contrat projeté.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.CalculerMontantMax(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Calcule le montant maximal pour un plan.
 </summary>
	<param name="oProtection">La protection pour laquelle calculer le montant max.</param>
	<returns>Le montant maximal pour la protection en fonction du montant de départ</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.CalculerAge(System.DateTime,System.DateTime)">
	<summary>
 Cette fonction permet de calculer le nombre d'année (âge) entre deux date
 </summary>
	<param name="dateNaissance">Date de naissance</param>
	<param name="dateJour">La date depuis laquel nous voulons calculer l'âge</param>
	<returns>Âge (en année)</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirNombreAssures(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Cette fonction recherche le nombre d'assurés de la proposition
 </summary>
	<param name="objetProposition">Objet de la proposition</param>
	<returns>Âge (en année)</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ContractantCorpo(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Cette fonction permet de déterminer si le contractant dans l'illustration est une corporation.
 </summary>
	<returns>True cont = Corporation
 False cont = individus</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IsProtectionPresent(IAFG.IA.VI.AF.Proposition.Protection,System.String,System.String@)">
	<summary>
 Cette fonction fait le traitement afin de vérifier si la
 protection passée en paramètre, pour l'individu à qui la
 protection sera associée, n'est pas déjà présente.
 </summary>
	<param name="oProtection">L'objet de protection sur lequel on est en train de modifier le code de plan ou l'appliquer À.</param>
	<param name="appliquerA">La/les personnes à rechercher.</param>
	<param name="codeMessageErreur">Le message d'erreur que la fonction peut nous retourner byref</param>
	<returns>True si la protection existe sur la personne spécifié, false sinon.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ProtMutellementExclusivePresente(IAFG.IA.VI.AF.Proposition.Proposition,System.String,System.String,System.String,System.Int32,System.String@,System.Boolean)">
	<summary>
 Fonction qui permet de savoir si une protection mutuellement exclusive est deja présente
 </summary>
	<param name="oProposition">un pointeur sur la proposition</param>
	<param name="planAVerifier">le code de plan à vérifier</param>
	<param name="appliquerA">l'individu sur lequel le plan est</param>
	<param name="idProtectionModifie">L'id de la protection qui est modifiée</param>
	<param name="noAssure">le numéro de l'assuré</param>
	<param name="codeMessageErreur">le code du message d'erreur s'il y a erreur</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirNbrProtectionPresent(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32,System.String,System.String,System.String)">
	<summary>
 Fonction pour obtenir le nombre de protection présentes
 </summary>
	<param name="oPropo">un pointeur sur l'Objet de propo</param>
	<param name="numeroAssure">Le numéro d'assuré</param>
	<param name="appliquerA">le code de l'individu (ou "0" ou "1" ou "2")</param>
	<param name="codePlan">le code de plan à vérifier</param>
	<param name="idProtExcluse">l'id de la protection à exclure</param>
	<returns>le nombre de protection présentes selon les paramètres passés</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.CalculMaxMemeCouverture(System.String,System.String,IAFG.IA.VI.AF.Proposition.Proposition,IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Fonction permettant d'obtenir le nombre maximale de la même couverture qu'un assuré peut avoir en simultané.
 </summary>
	<param name="PlanAVerifier">Plan pour lequel l'on veut obtenir le maximum.</param>
	<param name="AppliquerA">Individus sur lequel l'on veut obtenir le max pour ce plan.</param>
	<param name="oProposition">La proposition</param>
	<param name="oProtection">La protection pour laquelle l'on veut obtenir le nombre maximale, nothing si ajout de nouvelle.</param>
	<returns>Le nombre maximum de protections que l'on peut prendre.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.CalculMaxMemeCouverture(System.String,System.Int32,IAFG.IA.VI.AF.Proposition.Proposition,IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Fonction permettant d'obtenir le nombre maximale de la même couverture qu'un assuré peut avoir en simultané.
 </summary>
	<param name="PlanAVerifier">Plan pour lequel l'on veut obtenir le maximum.</param>
	<param name="noAssure">Numéro d'assuré sur lequel l'on veut obtenir le max pour ce plan.</param>
	<param name="oProposition">La proposition</param>
	<param name="oProtection">La protection pour laquelle l'on veut obtenir le nombre maximale, nothing si ajout de nouvelle.</param>
	<returns>Le nombre maximum de protections que l'on peut prendre.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IsProtectionPresent(IAFG.IA.VI.AF.Proposition.Proposition,System.String,System.String,System.String,System.Int32,System.String@)">
	<summary>
 Cette fonction fait le traitement afin de vérifier si la
 protection passée en paramètre, pour l'individu à qui la
 protection sera associée, n'est pas déjà présente.
 </summary>
	<param name="oProposition">L'objet de proposition pour lequel faire la vérification.</param>
	<param name="planAVerifier">Le code de plan pour lequel on veut rechercher.</param>
	<param name="appliquerA">La/les personnes à rechercher.</param>
	<param name="idProtectionModifie">Le Id de la protection que l'on est en train de changer, vide si ajout de nouvel protection.</param>
	<param name="noAssure">Le numero de l'assure sur lequel faire la vérification.</param>
	<param name="codeMessageErreur">Le message d'erreur que la fonction peut nous retourner byref</param>
	<returns>True si la protection existe sur la personne spécifié, false sinon.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirObjetAssures(System.Int32,IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Permet d'obtenir la collection d'assuré pour le numero d'assuré passé en paramètre
 </summary>
	<param name="numeroAssure">Le numéro d'assuré ordinal pour lequel on veut l'objet Assures</param>
	<param name="oProposition">un pointeur sur la proposition en cours</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IsLimiteProtGarAtteinte(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Fonction qui permet de savoir si la limite de protections ou de garanties est atteinte
 </summary>
	<returns>True = une des limites est atteinte, false = aucune limites atteintes</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.DeterminerAppliquerA(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Détermine le paramètre AppliquerA nécessaire à la fonction AffecterAssuresProtection
 </summary>
	<returns>le paramètre AppliquerA nécessaire à la fonction AffecterAssuresProtection</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.DeterminerAssuresProtection(IAFG.IA.VI.AF.Proposition.Protection,System.String)">
	<summary>
 Contruit une liste d'id d'individu selon le paramètre AppliquerA passer en paramètre
 </summary>
	<param name="appliquerA">Le paramètre pour lequel on veut construire une liste d'id</param>
	<returns>Une liste d'id d'individu</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirMontantAssInvIndividu(IAFG.IA.VI.AF.Proposition.Protection,System.Boolean)">
	<summary>
 Cette fonction retourne le montant d'ass inv pour l'individu de la protection passée en paramètre
 </summary>
	<param name="oProtection">la protection</param>
	<param name="exclusProtEnCours">flag pour prendre en compte ou non le montant de la protection en cours</param>
	<returns>le montant d'ass inv pour l'individu de la protection passée en paramètre</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirMontantAssInv(IAFG.IA.VI.AF.Proposition.Protection,System.Boolean)">
	<summary>
 Cette fonction retourne le montant d'ass inv total pour les protections d'invalidité ayant la même protection de base que celle passée en paramètre
 </summary>
	<param name="oProtection">la protection</param>
	<param name="exclusProtEnCours">flag pour prendre en compte ou non le montant de la protection en cours</param>
	<returns>le montant d'ass inv pour la protection de base de la protection passée en paramètre</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirModifiableIllustration(IAFG.IA.VI.AF.Proposition.Individu,System.String)">
	<summary>
 Obtient le nouveau statut de ModifiableIllustration
 </summary>
	<param name="objIndividu">l'objet Individu dont on doit changer la valeur de ModifiableIllustration</param>
	<param name="modifiable">la nouvelle valeur de modifiable</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirModifiableIllustration(IAFG.IA.VI.AF.Proposition.Individu,IAFG.IA.IL.AF.Illustration.ENUMs.StatutModifiable)">
	<summary>
 Obtient le nouveau statut de ModifiableIllustration
 </summary>
	<param name="objIndividu">l'objet Individu dont on doit changer la valeur de ModifiableIllustration</param>
	<param name="statut">la nouvelle valeur de modifiable ou dejaAllePropo</param>
	<returns>Nouvelle valeur </returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.AssureProtectionGet(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32,System.String[]@,System.Int32@)">
	<summary>
 Fonction qui permet de retourner toutes les protections pour un assuré.
 </summary>
	<param name="laProposition">La proposition sur laquelle retourner les protections.</param>
	<param name="numeroAssure">Le numéro d'assuré pour lequel on veut les protections.</param>
	<param name="idProtections">BYREF Tableau qui nous retournera les ids des protections.</param>
	<param name="nbrProtections">BYREF Le nombre de protections.</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.AssureProtectionGet(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32,System.Boolean,System.Boolean,System.String[]@,System.Int32@)">
	<summary>
 Fonction qui permet de retourner toutes les protections pour un assuré.
 </summary>
	<param name="laProposition">La proposition sur laquelle retourner les protections.</param>
	<param name="numeroAssure">Le numéro d'assuré pour lequel on veut les protections. 0 pour tous les assurés.</param>
	<param name="inclureOACA">Dit s'il faut inclure les protections OACA dans notre liste.</param>
	<param name="inclureIndexation">Dit s'il faut inclure les protections Indexation dans notre liste.</param>
	<param name="idProtections">BYREF Tableau qui nous retournera les ids des protections.</param>
	<param name="nbrProtections">BYREF Le nombre de protections.</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.AssureProtectionGet(IAFG.IA.VI.AF.Proposition.Proposition,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String[]@,System.Int32@)">
	<summary>
 Fonction qui permet de retourner toutes les protections pour un assuré.
 </summary>
	<param name="laProposition">La proposition sur laquelle retourner les protections.</param>
	<param name="numeroAssure">Le numéro d'assuré pour lequel on veut les protections. 0 pour tous les assurés.</param>
	<param name="inclureOACA">Dit s'il faut inclure les protections OACA dans notre liste.</param>
	<param name="inclureIndexation">Dit s'il faut inclure les protections Indexation dans notre liste.</param>
	<param name="idProtections">BYREF Tableau qui nous retournera les ids des protections.</param>
	<param name="nbrProtections">BYREF Le nombre de protections.</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.IsContractantOther(IAFG.IA.VI.AF.Proposition.Proposition)">
	<summary>
 Retourne vrai si le contractant n'est pas assuré ( pour toute la proposition )
 </summary>
	<param name="proposition"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirListeIDAssureEligible(IAFG.IA.VI.AF.Proposition.Protection)">
	<summary>
 Utiliser dans AffecterAssuresProtection
 </summary>
	<returns>une liste d'id d'individu éligible à la protection</returns>
	<remarks>Anciennement dans InfoProtections</remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirNoAssure(IAFG.IA.VI.AF.Proposition.Individu)">
	<summary>
 Retourne le numéro d'assuré d'un individu passé en paramètre
 </summary>
	<param name="objIndividu">L'individu pour lequel l'on veut savoir sur quel assuré il est.</param>
	<returns>Un numéro d'assuré, 0 s'il n'a pas trouvé.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirDateEmissionContrat(IAFG.IA.VI.AF.Illustration.Scenario)">
	<summary>
 Permet d'obtenir la date d'émission du contrat
 </summary>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirDateDerniereMAJInterets(IAFG.IA.VI.AF.Illustration.Scenario)">
	<summary>
 Permet d'obtenir la date de modification du contrat
 </summary>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirPremiereAnneeCivileIllustree(IAFG.IA.VI.AF.Illustration.Scenario)">
	<summary>
 Permet d'obtenir la date de modification du contrat
 </summary>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirAgeMaximumEmissionOption(System.String,IAFG.IA.VI.AF.Proposition.ENUMs.TypeOption,System.Boolean,IAFG.IA.VI.AF.Proposition.ENUMs.TypeAssurance)">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.VI.UtilitairesDonneesVie.UtilitairesDonneesVie.ObtenirValeurDisponibleTypeBoni(IAFG.IA.IL.AF.Illustration.ENUMs.TypeConcept)">
	<summary>
 Fonction qui retourne les types de bonis disponible dans l'application
 </summary>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>