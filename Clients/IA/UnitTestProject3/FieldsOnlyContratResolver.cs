using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using IAFG.IA.VI.AF.Base;
using IAFG.IA.VI.AF.Illustration;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

namespace UnitTestProject3
{
    public class ConstructeurPourObjetPropriete
    {
        private static ConstructorInfo _ctor;

        public static ConstructorInfo AssignerConstructeurPourObjetProprieteAuContrat(JsonObjectContract contract)
        {
            if (_ctor == null)
            {
                _ctor = typeof(Propriete<>).GetConstructor(new[] {typeof(Base), typeof(string)});
                if (_ctor == null)
                    throw new NullReferenceException(
                        "Le constructeur de l'objet Propriete acceptant les paramètres (Base, String) est disparu.");
            }
            contract.OverrideCreator = args => _ctor.Invoke(new object[] { (Base)args[0], (String)args[1] });
            return _ctor;
        }
    }

    public class FieldsOnlyContratResolver : DefaultContractResolver
    {
        protected override JsonObjectContract CreateObjectContract(Type objectType)
        {
            var contract = base.CreateObjectContract(objectType);
            if (objectType.Name.EndsWith("Scenario"))
            {
                var ctor = typeof(Scenario).GetMethod("IANew", BindingFlags.Static | BindingFlags.NonPublic);
                contract.OverrideCreator = args => ctor.Invoke(null, new object[] { (Base)args[0] });
                var ctorParameters = ctor.GetParameters();
                foreach (ParameterInfo parameterInfo in ctorParameters)
                {
                    // it is possible to generate a ParameterInfo with a null name using Reflection.Emit
                    // protect against an ArgumentNullException from GetClosestMatchProperty by testing for null here
                    JsonProperty matchingMemberProperty = (parameterInfo.Name != null) ? contract.Properties.GetClosestMatchProperty(parameterInfo.Name) : null;

                    // type must match as well as name
                    if (matchingMemberProperty != null && matchingMemberProperty.PropertyType != parameterInfo.ParameterType)
                    {
                        matchingMemberProperty = null;
                    }

                    // ensure that property will have a name from matching property or from parameterinfo
                    // parameterinfo could have no name if generated by a proxy (I'm looking at you Castle)
                    if (matchingMemberProperty != null || parameterInfo.Name != null)
                    {
                        JsonProperty property = CreatePropertyFromConstructorParameter(matchingMemberProperty, parameterInfo);

                        if (property != null)
                        {
                            contract.CreatorParameters.Add(property);
                        }
                    }
                }
            }
            else if (objectType.FullName.Contains("IAFG.IA.VI.AF.Base.Propriete"))
            {
                var ctor = ConstructeurPourObjetPropriete.AssignerConstructeurPourObjetProprieteAuContrat(contract);

                if (!contract.Properties.Contains("monNom"))
                {
                    try
                    {
                        var item = contract.Properties["_Nom"];
                        item.PropertyName = "monNom";
                        contract.Properties.AddProperty(item);
                        item = contract.Properties["_Parent"];
                        item.PropertyName = "monParent";
                        contract.Properties.AddProperty(item);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e);
                    }
                }
                //contract.Properties["monParent"].PropertyName = "monParent";
                //foreach (var property in contract.Properties)
                //{
                //    if (property.PropertyName == "_Nom")
                //    {
                //        property.PropertyName = "monNom";
                //        contract.Properties.Add(property);
                //    }
                //    if (property.PropertyName == "_Parent")
                //    {
                //        property.PropertyName = "monParent";
                //        contract.Properties.Add(property);
                //    }
                //}
                try
                {
                    var ctorParameters = CreateConstructorParameters(ctor, contract.Properties);
                    foreach (var parameter in ctorParameters)
                        contract.CreatorParameters.Add(parameter);
                }
                finally
                {
                    //contract.Properties["_Nom"].PropertyName = "_Nom";
                    //contract.Properties["_Parent"].PropertyName = "_Parent";
                    //contract.Properties.Remove("monNom");
                    //contract.Properties.Remove("monParent");
                }
            }
            //Console.WriteLine("CreateObjectContract-->objectType:{2} / ReflectedType:{0} / DeclaringType:{1}", objectType.ReflectedType, objectType.DeclaringType, objectType);
            contract.MemberSerialization = MemberSerialization.Fields;
            return contract;
        }

        protected override JsonContract CreateContract(Type objectType)
        {
            //Console.WriteLine("CreateContract-->objectType:{2} / ReflectedType:{0} / DeclaringType:{1}", objectType.ReflectedType, objectType.DeclaringType, objectType);
            if (objectType.Name.EndsWith("Scenarios"))
                return CreateObjectContract(objectType);
            return base.CreateContract(objectType);
        }

        //protected override IList<JsonProperty> CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties)
        //{
        //    if (constructor.ReflectedType.Name.Contains("Scenario") || constructor.DeclaringType.Name.Contains("Scenario"))
        //    {
        //        var t = new object();
        //    }
        //    return base.CreateConstructorParameters(constructor, memberProperties);
        //}

        //protected override JsonProperty CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo)
        //{
        //    if (matchingMemberProperty!= null)
        //        Console.WriteLine("JsonProperty -> {0} / {1} / {2} / {3}", matchingMemberProperty.PropertyName, matchingMemberProperty.UnderlyingName, (matchingMemberProperty.DeclaringType!=null? matchingMemberProperty.DeclaringType.Name : "NULL"), (matchingMemberProperty.PropertyType!=null? matchingMemberProperty.PropertyType.Name : "NULL"));
        //    return base.CreatePropertyFromConstructorParameter(matchingMemberProperty, parameterInfo);
        //}

        protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization)
        {
            return base.CreateProperties(type, MemberSerialization.Fields);
        }

        protected override List<MemberInfo> GetSerializableMembers(Type objectType)
        {
            return ExtraireMembres(objectType).ToList();
        }

        private static IEnumerable<MemberInfo> ExtraireMembres(Type objectType, IEnumerable<MemberInfo> membres = null)
        {
            membres = (membres ?? new List<MemberInfo>());
            
            var flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;
            membres = membres.Concat(objectType.GetFields(flags).Where(x => membres.Count(m => m.Name == x.Name) == 0)).ToList();
            if (objectType.BaseType != null && objectType.BaseType.FullName.StartsWith("IAFG"))
                return FieldsOnlyContratResolver.ExtraireMembres(objectType.BaseType, membres);
            return membres;
        }
    }
}