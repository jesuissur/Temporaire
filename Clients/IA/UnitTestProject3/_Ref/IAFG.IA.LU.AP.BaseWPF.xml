<?xml version="1.0"?>
<doc>
<assembly>
<name>
IAFG.IA.LU.AP.BaseWPF
</name>
</assembly>
<members>
<member name="M:IAFG.IA.LU.AP.BaseWPF.Controle.ValidationSummary.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Controle.ValidationSummary">
	<summary>
ValidationSummary
</summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.BarreTitre.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.BarreTitre">
	<summary>
BarreTitre
</summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Controle.ControleSaisieDate.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Controle.ControleSaisieDate">
	<summary>
ControleSaisieDate
</summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalView.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalView">
	<summary>
ConteneurPrincipalView
</summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.TraitementEnCoursView.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.TraitementEnCoursView">
	<summary>
TraitementEnCoursView
</summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurModalView.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.ConteneurModalView">
	<summary>
ConteneurModalView
</summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Toolbox.ToolboxView.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Toolbox.ToolboxView">
	<summary>
ToolboxView
</summary>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListeSupprimer.EstActifProperty">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListeSupprimer.comboBox_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 On mémorise la sélection lors de l'entrée dans le contrôle, afin de gérer l'annulation
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListeSupprimer.comboBox_PreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
	<summary>
 Gère la saisie de caractères dans le contrôle
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListeSupprimer.comboBox_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 Si c'est la touche DEL, on remet la valeur telle qu'elle était à l'entrée dans le contrôle
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListeSupprimer.LierEstActif(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
	<param name="sender">La source de l'événement</param>
	<param name="e">les paramètres de l'événement</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListeSupprimer.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListeSupprimer.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListeSupprimer">
	<summary>
 Comportement commun aux contrôles de types liste déroulante
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.CommandeOk">
	<summary>
 Commande à exécuter lors du clique du bouton précédent
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.CommandeAnnuler">
	<summary>
 Commande à exécuter lors du clique du bouton suivant
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.HauteurFenetre">
	<summary>
 La hauteur de la fenêtre
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.LargeurFenetre">
	<summary>
 La largeur de la fenêtre
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.EstVisibleOk">
	<summary>
 Mappe la propriété pour la visibilité du bouton Précédent issue du service de navigation
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.EstVisibleAnnuler">
	<summary>
 Mappe la propriété pour la visibilité du bouton Suivant issue du service de navigation
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.EstActifOk">
	<summary>
 Mappe la propriété pour l'activation du bouton Précédent issue du service de navigation
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.EstActifAnnuler">
	<summary>
 Mappe la propriété pour l'activation du bouton Suivant issue du service de navigation
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.CouleurFond">
	<summary>
 La couleur de fond du conteneur modal
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.EstFenetreCancelle">
	<summary>
 Variable qui retient si la fenêtre a été cancellé ou non
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.#ctor(IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.IServiceFenetre,IAFG.IA.LU.AP.BaseWPF.IViewModelFactory,System.String)">
	<summary>
 Constructeur de ViewModel utlisant la navigation
 </summary>
	<param name="viewModelFactory">la fabrique de ViewModel</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.Fermer">
	<summary>
 Gère la fermeture de la fenêtre modale.  Clique sur le bouton ok
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.Annuler">
	<summary>
 Gère l'annulation de la saisie
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel.EstActif(IAFG.IA.LU.AP.BaseWPF.SourceLiaisonBase)">
	<summary>
 Vérifie que l'objet demandé est bien celui connu comme l'enfant courant du conteneur
 </summary>
	<param name="enfant">le ViewModel source de l'appel</param>
	<returns>l'indicateur d'équivalence paramètre vs enfant courant</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.ConteneurModalViewModel">
	<summary>
 Classe de ViewModel pour le conteneur des fenêtres modales
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurEnumCollapse.ValeurNulle">
	<summary>
 Obtient ou définit la valeur d'enum prise quand le contrôle retourne une valeur nulle
 </summary>
	<remarks>Typiquement utilisé pour les boutons radio ou checkboxes</remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurEnumCollapse.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>
 Convertit une valeur d'énumération en booléen si la valeur est égale au paramètre du convertisseur
 </summary>
	<param name="value">la valeur attendue</param>
	<param name="targetType">le type cible</param>
	<param name="parameter">le paramètre du convertisseur du type d'enum attendu</param>
	<param name="culture">la culture</param>
	<returns>le booléen résultant de la comparaison</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurEnumCollapse.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>
 Retrourne la valeur d'enumération passée en paramètre si la valeur est vraie
 </summary>
	<param name="value">l'indicateur d'état</param>
	<param name="targetType">le type cible</param>
	<param name="parameter">le paramètre du convertisseur</param>
	<param name="culture">la culture</param>
	<returns>la valeur correspondant au paramètre si vraie, sinon on retourne la valeur par défaut</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurEnumCollapse">
	<summary>
 Convertisseur d'une valeur d'énumération vers booléen
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Evenement.ParametreContexte.CleContexte">
	<summary>
 Obtient la valeur de la clé de contexte
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Evenement.ParametreContexte.#ctor(System.String)">
	<summary>
 Constructeur
 </summary>
	<param name="cleContexte">la clé de contexte modifiée</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Evenement.ParametreContexte">
	<summary>
 Classe de transport pour les modifications au contexte
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.AppBase.#ctor">
	<summary>
 Constructeur par défaut.
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.AppBase.DisableFocusOnDefaultItemTemplate">
	<summary>
 Désactive le focus sur les éléments de ItemsControl.
 </summary>
	<remarks>Par défaut, Caliburn.Micro permet le focus sur les éléments contenus dans un ItemsControl.</remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.AppBase">
	<summary>
 Classe de base pour l'application
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Controle.HeaderedFooteredContentControl.#cctor">
	<summary>
 Constructeur par défaut
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Notification.GestionnaireDiffusion.Ajouter(IAFG.IA.LU.AP.BaseWPF.Notification.Diffusion)">
	<summary>
 Ajoute une diffusion de notification à la liste
 </summary>
	<param name="diffusion">l'objet de diffusion liant les deux propriétés source et destination</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Notification.GestionnaireDiffusion.Vider">
	<summary>
 Vide la liste de diffusion.
 </summary>
	<remarks></remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Notification.GestionnaireDiffusion">
	<summary>
 Classe de gestion de diffusion pour la notification de changement de propriété
 </summary>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieTexteComboBox.EstActifProperty">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieTexteComboBox.LierEstActif(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
	<param name="sender">La source de l'événement</param>
	<param name="e">les paramètres de l'événement</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieTexteComboBox.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieTexteComboBox.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieTexteComboBox">
	<summary>
 Classe qui sert à définir une propriété sur le textbox d'un ComboBox.
 </summary>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.DictionnaireRessourceDefaut.#ctor">
	<summary>
 Constructeur par défaut.
 </summary>
	<remarks></remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.DictionnaireRessourceDefaut">
	<summary>
 Dictionnaire contenant les ressources par défaut de l'application.
 </summary>
	<remarks>
 Cette classe est utilisée pour charger les ressources d'un fichier de style global à l'application pour avoir une expérience complète dans le concepteur graphique.
 
 Normalement, lorsqu'on lie un fichier de style dans le App.xaml d'une application WPF, tous les contrôles utilisateurs hérite des styles. Toutefois, comme le projet
 visual studio n'est pas de type Application WPF, il semble que ce ne soit pas le cas. Ce dictionnaire par défaut est donc la seule solution trouvée.
 En Visual Studio 2008, on pouvait insérer le dictionnaire dans le constructeur d'une classe de base de contrôle utilisateur, mais ça ne fonctionne pas en 2010.
 </remarks>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.CONTENEUR_MODAL_ANNULER">
	<summary>
  Looks up a localized string similar to _Annuler.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.CONTENEUR_MODAL_OK">
	<summary>
  Looks up a localized string similar to _Ok.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.CONTENEUR_PRINCIPAL_PRECEDENT">
	<summary>
  Looks up a localized string similar to _Précédent.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.CONTENEUR_PRINCIPAL_SUIVANT">
	<summary>
  Looks up a localized string similar to _Suivant.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.MASQUE_ANNEE">
	<summary>
  Looks up a localized string similar to AAAA.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.MASQUE_JOUR">
	<summary>
  Looks up a localized string similar to JJ.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.MASQUE_MOIS">
	<summary>
  Looks up a localized string similar to MMM.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.MESSAGE_ERREUR_CONVERTION_INT">
	<summary>
  Looks up a localized string similar to La valeur doit être comprise entre {0} et {1}..
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.MESSAGE_ERREUR_DATE_INVALIDE">
	<summary>
  Looks up a localized string similar to La date saisie n'est pas valide..
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.RACCOURCI_ANNULER">
	<summary>
  Looks up a localized string similar to A.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.TAG1">
	<summary>
  Looks up a localized string similar to Tag1.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.TAG2">
	<summary>
  Looks up a localized string similar to Tag2.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.TITRE_AJOUT_ASSURE">
	<summary>
  Looks up a localized string similar to Ajout d'un assuré.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.TITRE_AJOUT_CONTRACTANT">
	<summary>
  Looks up a localized string similar to Ajout d'un contractant.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.TITRE_AJOUT_CONTRACTANT_SIMPLE">
	<summary>
  Looks up a localized string similar to Ajout d'un contractant.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.TITRE_MODIFICATION_ASSURE">
	<summary>
  Looks up a localized string similar to Modification d'un assuré.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.TITRE_MODIFICATION_CONTRACTANT">
	<summary>
  Looks up a localized string similar to Modification d'un contractant.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources.TITRE_MODIFICATION_CONTRACTANT_SIMPLE">
	<summary>
  Looks up a localized string similar to Modification d'un contractant.
</summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.My.Resources.Ressources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementTabSurEnter">
	<summary>
 Comportement qui permet de naviguer par tabulation sur le bouton Entrée pour n'importe quel contrôle
 </summary>
	<remarks>Ce comportement s'applique à tous les contrôles se trouvant dans le conteneur XAML qui les encapsule</remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.FocusExtension.#ctor">
	<summary>
 Default constructor.
 </summary>
	<remarks></remarks>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.FocusExtension.IsFocusedProperty">
	<summary>
 Attached property to set focus on a control.
 </summary>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.FocusExtension.GetIsFocused(System.Windows.DependencyObject)">
	<summary>
 Get the control's IsFocused property.
 </summary>
	<param name="element">Element from which to get the property.</param>
	<returns>The boolean value of the property.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.FocusExtension.SetIsFocused(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
	<summary>
 Set the control's IsFocused property.
 </summary>
	<param name="element">Element on which to set the property.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.FocusExtension.IsFocusedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Event handler to a change of IsFocused property value.
 </summary>
	<param name="d">Object on which the property has changed.</param>
	<param name="e">Event argument.</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.FocusExtension.fe_IsVisibleChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Raised when the IsVisible property is changed.
 </summary>
	<param name="sender">Event source.</param>
	<param name="e">Event data.</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.FocusExtension.FrameworkElement_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 Raised when a control gets the focus.
 </summary>
	<param name="sender">Event source.</param>
	<param name="e">Event data.</param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.FocusExtension.FrameworkElement_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 Raised when a control losts the focus.
 </summary>
	<param name="sender">Event source.</param>
	<param name="e">Event data.</param>
	<remarks></remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.FocusExtension">
	<summary>
 Contains focus extensions.
 </summary>
	<remarks></remarks>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreFermeturePopup.NomPopup">
	<summary>
 nom du popup qui vient de se fermer
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreFermeturePopup">
	<summary>
 Classe de transport des paramètres pour le service d'appel aux popups des protections
 </summary>
</member><member name="E:IAFG.IA.LU.AP.BaseWPF.Commande.Commande.CanExecuteChanged">
	<summary>
 Survient lorsque la disponibilité de la commande est modifiée.
 </summary>
	<param name="sender">La commande modifiée.</param>
	<param name="e">Les paramètres détaillant l'événement.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.Commande.#ctor(System.Action)">
	<summary>
 Crée une commande qui est toujours autorisée à être exécutée.
 </summary>
	<param name="logiqueExecution">L'action à être exécutée par la commande.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.Commande.#ctor(System.Action,System.Predicate{System.Boolean})">
	<summary>
 Crée une commande.
 </summary>
	<param name="logiqueExecution">L'action à être exécutée par la commande.</param>
	<param name="indicateurExecution">L'indicateur de statut d'autorisation d'exécution de la commande.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.Commande.CanExecute(System.Object)">
	<summary>
 Indique si la commande peut être exécutée.
 </summary>
	<param name="parametre">Le paramètre à fournir à la logique de vérification, le cas échéant.</param>
	<returns><c>true</c> si la commande peut être exécutée, <c>false</c> sinon.</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.Commande.Execute(System.Object)">
	<summary>
 Exécute la commande.
 </summary>
	<param name="parametre">Le paramètre à fournir à la logique d'exécution, le cas échéant.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.Commande.ReevaluerDisponibilite">
	<summary>
 Force une réévaluation de la disponibilite de la commande.
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.Commande.ReevaluerDisponibilite(System.Object)">
	<summary>
 Force une réévaluation de la disponibilite de la commande.
 </summary>
	<param name="parametre">Le paramètre à fournir à la logique de vérification, le cas échéant.</param>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.EstActifProperty">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
	<remarks>Par défaut, le comportement est activé via le fichier de styles, pour tous les boutons radio de l'application</remarks>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.DoitDeplacerFocusSurSelectionProperty">
	<summary>
 Propriété attachée pour indiquer de déplacer le focus lors de la sélection.
 </summary>
	<remarks>Par défaut, le comportement est activé.</remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.liste_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
	<summary>
 Prend en charge l'événement KeyDown clavier sur le contrôle, pour gérer les touches Delete et les flèches de navigation
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.liste_PreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
	<summary>
 Gestion de l'événement lors de l'envoi d'une touche au clavier
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.liste_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
	<summary>
 Survient lorsque la sélection change dans les ListBox de boutons radio.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.GetDoitDeplacerFocusSurSelection(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.SetDoitDeplacerFocusSurSelection(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.LierEstActif(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
	<param name="sender">La source de l'événement</param>
	<param name="e">les paramètres de l'événement</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio.NaviguerControleSuivant">
	<summary>
 Permet de passer le focus à l'élément suivant dans la hiérarchie de la fenêtre
 </summary>
	<remarks></remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementListeBoutonRadio">
	<summary>
 Classe de gestion du comportement d'une ListBox à boutons radio
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurNullableEnum.ValeurNulle">
	<summary>
 Obtient ou définit la valeur d'enum prise quand le contrôle retourne une valeur nulle
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurNullableEnum.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>
 Convertit une valeur d'énumération en booléen si la valeur est égale au paramètre du convertisseur
 </summary>
	<param name="value">la valeur attendue</param>
	<param name="targetType">le type cible</param>
	<param name="parameter">le paramètre du convertisseur du type d'enum attendu</param>
	<param name="culture">la culture</param>
	<returns>le booléen résultant de la comparaison</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurNullableEnum.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>
 Retrourne la valeur d'enumération passée en paramètre si la valeur est vraie
 </summary>
	<param name="value">l'indicateur d'état</param>
	<param name="targetType">le type cible</param>
	<param name="parameter">le paramètre du convertisseur</param>
	<param name="culture">la culture</param>
	<returns>la valeur correspondant au paramètre si vraie, sinon on retourne la valeur par défaut</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurNullableEnum">
	<summary>
 Convertisseur permettant de gérer une valeur d'énumération lorsque le retour est vide
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreAffichagePopup.Titre">
	<summary>
 Obtient l'étiquette type pour configurer l'affichage ad hoc
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreAffichagePopup.#ctor(System.String)">
	<summary>
 Constructeur
 </summary>
	<param name="titre">le titre du popup</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreAffichagePopup">
	<summary>
 Classe de transport des paramètres pour le service d'appel aux popups de configuration
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ServiceFenetre.AfficherMessage(System.String)">
	<summary>
 Gère l'affihcage de la popup de message
 </summary>
	<param name="codeMessage">le code de message à insérer dans la fenêtre</param>
	<returns>le résultat de la réponse retournée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ServiceFenetre.AfficherMessage(System.String,System.String)">
	<summary>
 Gère l'affichage de la popup de message
 </summary>
	<param name="codeMessage">le code de message à insérer dans la fenêtre</param>
	<param name="partieVariable">la partie variable à insérer dans le message</param>
	<returns>le résultat de la réponse retournée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ServiceFenetre.AfficherPopListe(System.Int32,IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.EnumTypeListe)">
	<summary>
 Gère l'affichage d'une fenêtre popup pour ajouter/modifier un élément de liste
 </summary>
	<param name="index">l'index de l'élément de liste passé</param>
	<param name="typeListe">le type de liste pour configurer l'affichage de la popup</param>
	<returns>l'identifiant de l'élement résultant</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ServiceFenetre.AfficherConfiguration(System.String)">
	<summary>
 Gère l'affichage de la popup de configuration
 </summary>
	<param name="etiquette">l'étiquette pour afficher la fenêtre de manièr appropriée</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ServiceFenetre.AfficherProtections">
	<summary>
 Gère l'affichage de la popup des protections
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ServiceFenetre.FermerPopup">
	<summary>
 Gère la fermeture d'un popup
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ServiceFenetre.AnnulerPopup">
	<summary>
 Gère la fermeture d'un popup
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ServiceFenetre">
	<summary>
 Classe du service d'appel aux fenêtres popups
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Unity.ResolutionParametreParType.#ctor(System.Object)">
	<summary>
 Constructeur
 </summary>
	<param name="valeur">le paramètre à injecter au conteneur</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Unity.ResolutionParametreParType.GetResolver(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
	<summary>
 Affecte la valeur à la dépendance si les types sont les mêmes
 </summary>
	<param name="context">le contexte de création courant</param>
	<param name="dependencyType">le type de la dépendance</param>
	<returns>la résolution de la valeur pour la dépendance</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Unity.ResolutionParametreParType">
	<summary>
 Classe permettant de résoudre un paramètre passé par injection de dépendance en fonction de son type réel
 </summary>
	<remarks>Cette classe est couplée avec la fonction Resolve du conteneur Unity</remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementRedimensionnerComboBox">
	<summary>
 Classe qui sert à définir une propriété sur le textbox d'un ComboBox.
 </summary>
	<remarks></remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.SourceLiaisonSectionPrincipale">
	<summary>
 Classe de base pour tous les objets servant au binding (ViewModelBase et autres classes servant au binding) dans un conteneur principal.
 Cela permet de centraliser la gestion de la navigation.
 </summary>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.SharedResourceDictionary._sharedDictionaries">
	<summary>
 Internal cache of loaded dictionaries 
 </summary>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.SharedResourceDictionary._sourceUri">
	<summary>
 Local member of the source uri
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.SharedResourceDictionary.Source">
	<summary>
 Gets or sets the uniform resource identifier (URI) to load resources from.
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.SharedResourceDictionary">
	<summary>
 The shared resource dictionary is a specialized resource dictionary
 that loads it content only once. If a second instance with the same source
 is created, it only merges the resources from the cache.
 </summary>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.ComportementFiltreExpressionBase.FiltreExpressionProperty">
	<summary>
 Propriété attachée pour définir l'expression régulière de filtrage des caractères autorisés en saisie
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ComportementFiltreExpressionBase.TransformTextInput(System.Windows.Input.TextCompositionEventArgs,System.Windows.DependencyObject)">
	<summary>
 Événement de contrôle de saisie au clavier
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ComportementFiltreExpressionBase.TransformPastedText(System.Windows.DependencyObject,System.Windows.DataObjectPastingEventArgs)">
	<summary>
 Gère l'événement de copier/coller
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ComportementFiltreExpressionBase.Transformer(System.String,System.String)">
	<summary>
 Méthode de mise en forme majuscule et de filtrage des caractères de la chaîne saisie
 </summary>
	<param name="chaineBrute">La chaîne brute, telle que saisie en amont du traitement</param>
	<param name="filtreExpression">l'expression régulière pour filtrer les caractères autorisés</param>
	<returns>La chaîne résultante, à affecter au contrôle</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ComportementFiltreExpressionBase.GetFiltreExpression(System.Windows.DependencyObject)">
	<summary>
 Obtient la formule pour l'expression régulière des caractères autorisés
 </summary>
	<param name="element">le contrôle</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ComportementFiltreExpressionBase.SetFiltreExpression(System.Windows.DependencyObject,System.String)">
	<summary>
 Définit la formule pour l'expression régulière des caractères autorisés
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieNumerique.EstActifProperty">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieNumerique.textBox_PreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
	<summary>
 Événement de gestion de la saisie au clavier
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieNumerique.textBox_TextPasted(System.Object,System.Windows.DataObjectPastingEventArgs)">
	<summary>
 Gestion du copier/coller
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieNumerique.textBox_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
	<summary>
 Gestion des touches spéciales
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieNumerique.LierEstActif(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
	<param name="sender">La source de l'événement</param>
	<param name="e">les paramètres de l'événement</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieNumerique.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieNumerique.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieNumerique">
	<summary>
 Classe de gestion du comportement de saisie numérique dans un contrôle TextBox
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.TraitementEnCoursViewModel.Message">
	<summary>
 nom et prénom concaténés de l'individu
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurBooleenChaine.#ctor">
	<summary>
 Constructeur par défaut
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurBooleenChaine">
	<summary>
 Convertisseur de booléen vers le type Visibility
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreAnnulerPopup.NomPopup">
	<summary>
 nom du popup qui vient de se fermer
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreAnnulerPopup">
	<summary>
 Classe de transport des paramètres pour le service d'appel aux popups des protections
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Navigation.ServiceNavigationBase.ConteneurPrincipal">
	<summary>
 Obtient ou définit le conteneur principal hôte
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Navigation.ServiceNavigationBase.#ctor">
	<summary>
 Constructeur
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Navigation.ServiceNavigationBase.Precedent">
	<summary>
 Affiche l'écran précédent dans la chaîne d'écran.
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Navigation.ServiceNavigationBase.Suivant">
	<summary>
 Affiche l'écran suivant dans la chaîne d'écran.
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Navigation.ServiceNavigationBase.Naviguer(System.String)">
	<summary>
 Affiche un écran directement sans égard à l'ordre.
 </summary>
	<param name="cle">Clé de l'écran à afficher.</param>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.MessageAffiche.CodeMessage">
	<summary>
 Obtient le code de message à passer
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.MessageAffiche.PartieVariable">
	<summary>
 Obtient la partie variable du message
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.MessageAffiche.Resultat">
	<summary>
 Obtient ou définit le résultat pour gérer le traitement subséquent
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.MessageAffiche.#ctor(System.String,System.String)">
	<summary>
 Constructeur
 </summary>
	<param name="codeMessage">le code de message à afficher à l'utilisateur</param>
	<param name="partieVariable">la partie variable du message</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.MessageAffiche">
	<summary>
 Classe de gestion des messages à l'utilisateur pour les popups et dont on attend une réponse
 </summary>
	<remarks></remarks>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.IReferenceContainer.Container">
	<summary>
 Définit le conteneur d'inversion de contrôle.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.IReferenceContainer">
	<summary>
 Interface permettant d'injecter une référence au IoCContainer.
 </summary>
	<remarks></remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.EnumTypeListe">
	<summary>
 Énumération des types de liste pour l'appel à la popup appropriée
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.IServiceFenetre">
	<summary>
 Interface de gestion du service d'appel aux fenêtres popup
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Evenement.SauvegarderPropositionInteropCommand">
	<summary>
 Cet commande a pour but d'avertir le VB (par l'entremise des Interops) qu'une sauvegarde de l'objet Propo est nécessaire.
 </summary>
	<remarks></remarks>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionTexte.EstActifProperty">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionTexte.textBox_OnKeyboardFocusSelectText(System.Object,System.Windows.Input.KeyboardFocusChangedEventArgs)">
	<summary>
 Gestion du focus clavier
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionTexte.LierEstActif(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
	<param name="sender">La source de l'événement</param>
	<param name="e">les paramètres de l'événement</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionTexte.textBox_OnMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
	<summary>
 Gestion du focus sur clic de souris
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionTexte.textBox_OnMouseRightButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
	<summary>
 Gestion du focus sur clic droit de la souris
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionTexte.ObtenirParentDansVisualTree(System.Object)">
	<summary>
 Boucle dans le VisualTree jusqu'au contrôle TextBox
 </summary>
	<param name="source">la source de l'événement</param>
	<returns>l'objet attendu</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionTexte.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionTexte.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionTexte">
	<summary>
 Classe de gestion du comportement de sélection de tout le contenu d'un contrôle TextBox sur prise de focus
 </summary>
	<remarks>Par défaut, le comportement est activé via le fichier de styles, pour tous les TextBoxes de l'application</remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurBooleenVisibilite.#ctor">
	<summary>
 Constructeur par défaut
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurBooleenVisibilite">
	<summary>
 Convertisseur de booléen vers le type Visibility
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Evenement.ParametreAideContextuelle.CodeAide">
	<summary>
 Obtient le code du message à afficher
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Evenement.ParametreAideContextuelle.#ctor(System.Int32)">
	<summary>
 Constructeur
 </summary>
	<param name="codeAide">le code du message à afficher</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Evenement.ParametreAideContextuelle">
	<summary>
 Classe de transport pour passer l'appel à l'aide contextuelle de la barre de statut
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commun.LecteurFichierIni.#ctor(System.String)">
	<summary>
 Constructeur
 </summary>
	<param name="fichier">le chemin d'accès au fichier .INI</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commun.LecteurFichierIni.LireValeur(System.String)">
	<summary>
 Lecture d'une valeur à partir de la clé demandée
 </summary>
	<param name="cle">la clé demandée</param>
	<returns>la valeur associée dans le fichier</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commun.LecteurFichierIni.LireValeur(System.String,System.String)">
	<summary>
 Lecture d'une valeur à partir de la clé et de la section demandées
 </summary>
	<param name="cle">la clé demandée</param>
	<param name="section">la section où trouver la clé</param>
	<returns>la valeur associée dans le fichier</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commun.LecteurFichierIni.LireValeur(System.String,System.String,System.String)">
	<summary>
 Lecture d'une valeur à partir de la clé et de la section demandées
 </summary>
	<param name="cle">la clé demandée</param>
	<param name="section">la section où trouver la clé</param>
	<param name="defaut">la valeur par défaut à renvoyer en cas d'absence de la clé</param>
	<returns>la valeur associée dans le fichier</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commun.LecteurFichierIni.LireCles(System.String)">
	<summary>
 Lit les clés de la section demandée
 </summary>
	<param name="section"></param>
	<returns>le tableau des clés de la section</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commun.LecteurFichierIni.LireSections">
	<summary>
 Retourne les sections du fichier passé en entrée
 </summary>
	<returns>le tableau des section du fichier</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Commun.LecteurFichierIni">
	<summary>
 Classe de lecture et de récupération des éléments d'un fichier .INI
 </summary>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementAideContextuelle.AideContextuelleProperty">
	<summary>
 Propriété attachée pour passer le code de message d'aide contextuelle à envoyer
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementAideContextuelle.controle_OnGotFocus(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 Gestion de prise de focus dans le contrôle
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementAideContextuelle.LierAideContextuelle(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements à gérer au comportement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementAideContextuelle.GetAideContextuelle(System.Windows.DependencyObject)">
	<summary>
 Obtient le code de message via la propriété attachée, quand stipulé
 </summary>
	<param name="element">le contrôle de la fenêtre</param>
	<returns>le code de message entré dans le XAML</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementAideContextuelle.SetAideContextuelle(System.Windows.DependencyObject,System.Int32)">
	<summary>
 Définit la propriété attachée du contrôle
 </summary>
	<param name="element">le contrôle auquel se rattache la propriété</param>
	<param name="value">la valeur saisie</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementAideContextuelle">
	<summary>
 Gestion de l'aide contextuelle sur la prise de focus d'un contrôle, pour afficher dans la barre d'état de l'application
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementFocusDefaut.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété EstActif pour un élément.
 </summary>
	<param name="element"></param>
	<returns>Retourne un booléen indiquant la valeur de la propriété.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementFocusDefaut.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété EstActif pour un élément.
 </summary>
	<param name="element"></param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementFocusDefaut.EstActif_PropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Survient lors d'un changementd de valeur pour la propriété EstActif.
 </summary>
	<param name="dependencyObject"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementFocusDefaut">
	<summary>
 Comportement visant à placer le focus de manière automatique sur le premier contrôle disponible.
 </summary>
	<remarks></remarks>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.CommandePrecedent">
	<summary>
 Commande à exécuter lors du clique du bouton précédent
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.CommandeSuivant">
	<summary>
 Commande à exécuter lors du clique du bouton suivant
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.EnfantActif">
	<summary>
 Obtient l'enfant actif dans le conteneur.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.EstVisiblePrecedent">
	<summary>
 Mappe la propriété pour la visibilité du bouton Précédent issue du service de navigation
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.EstVisibleSuivant">
	<summary>
 Mappe la propriété pour la visibilité du bouton Suivant issue du service de navigation
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.PeutNaviguerPrecedent">
	<summary>
 Mappe la propriété pour l'activation du bouton Précédent issue du service de navigation
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.PeutNaviguerSuivant">
	<summary>
 Mappe la propriété pour l'activation du bouton Suivant issue du service de navigation
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.#ctor(IAFG.IA.LU.AP.BaseWPF.Services.Navigation.IServiceNavigation,IAFG.IA.LU.AP.BaseWPF.IViewModelFactory,Caliburn.Micro.IEventAggregator)">
	<summary>
 Constructeur de ViewModel utlisant la navigation
 </summary>
	<param name="serviceNavigation">le service de navigation, pour passer d'un écran à l'autre</param>
	<param name="viewModelFactory">la fabrique de ViewModel</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.PersisterAvantFermeture">
	<summary>
 Méthode à appeler pour persister les données de l'écran en cours avant de le fermer.
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.EstActif(IAFG.IA.LU.AP.BaseWPF.SourceLiaisonBase)">
	<summary>
 Indique si le ViewModel passé en paramètre est bien celui qui est défini comme élément actif
 </summary>
	<param name="enfant">le ViewModel appelant</param>
	<returns>le résultat de la comparaison entre les paramètre et l'élément actif</returns>
	<remarks>Cette fonction permet de ne s'abonner aux événements de l'agrégateur que si on est avec le même ViewModel</remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.AfficherEcran(System.String)">
	<summary>
 Affiche un écran.
 </summary>
	<param name="cle">Clé de l'écran à afficher.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.Suivant">
	<summary>
 Demande d'afficher l'écran suivant au service de navigation.
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.Precedent">
	<summary>
 Demande d'afficher l'écran précédent au service de navigation.
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.PersisterEcranAvantFermeture">
	<summary>
 Permet à l'écran courant de persister ses données avant de fermer.
 </summary>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel.PeutSauvegarder">
	<summary>
 Appelle les validations et autres tâches préalables à l'opération de sauvegarde
 </summary>
	<returns>l'indicateur d'autorisation de sauvegarde</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.ConteneurPrincipalViewModel">
	<summary>
 ViewModel du conteneur principal des écrans. 
 </summary>
	<remarks>Ce ViewModel est responsable d'afficher le bon écran selon la sélection de navigation qui a été faite par l'utilisateur.</remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurBooleenCouleur.#ctor">
	<summary>
 Constructeur par défaut
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurBooleenCouleur">
	<summary>
 Convertisseur de booléen vers une couleur
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurStringKey.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>
 Convertit une valeur string en valeur key
 </summary>
	<param name="value">la valeur attendue</param>
	<param name="targetType">le type cible</param>
	<param name="parameter">le paramètre du convertisseur du type d'enum attendu</param>
	<param name="culture">la culture</param>
	<returns>le key résultant</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurStringKey">
	<summary>
 Convertisseur d'une string en key (pour les raccourcis clavier)
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreProtections">
	<summary>
 Classe de transport des paramètres pour le service d'appel aux popups des protections
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Resources.ResourceManager">
	<summary>
  Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.My.Resources.Resources.Culture">
	<summary>
  Remplace la propriété CurrentUICulture du thread actuel pour toutes
  les recherches de ressources à l'aide de cette classe de ressource fortement typée.
</summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.My.Resources.Resources">
	<summary>
  Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
</summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Controle.ListBoxItemRadio.CaractereCle">
	<summary>
 Obtient ou définit la propriété permettant d'attacher un caractère au contrôle, pour la saisie clavier
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Controle.ListBoxItemRadio.#cctor">
	<summary>
 Constructeur par défaut
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Controle.ListBoxItemRadio">
	<summary>
 Classe de contrôle pour ajouter des fonctionnalités aux éléments des listes de boutons radio 
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurEnumBooleen.ValeurNulle">
	<summary>
 Obtient ou définit la valeur d'enum prise quand le contrôle retourne une valeur nulle
 </summary>
	<remarks>Typiquement utilisé pour les boutons radio ou checkboxes</remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurEnumBooleen.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>
 Convertit une valeur d'énumération en booléen si la valeur est égale au paramètre du convertisseur
 </summary>
	<param name="value">la valeur attendue</param>
	<param name="targetType">le type cible</param>
	<param name="parameter">le paramètre du convertisseur du type d'enum attendu</param>
	<param name="culture">la culture</param>
	<returns>le booléen résultant de la comparaison</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurEnumBooleen.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>
 Retrourne la valeur d'enumération passée en paramètre si la valeur est vraie
 </summary>
	<param name="value">l'indicateur d'état</param>
	<param name="targetType">le type cible</param>
	<param name="parameter">le paramètre du convertisseur</param>
	<param name="culture">la culture</param>
	<returns>la valeur correspondant au paramètre si vraie, sinon on retourne la valeur par défaut</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurEnumBooleen">
	<summary>
 Convertisseur d'une valeur d'énumération vers booléen
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Notification.Diffusion.#ctor(System.ComponentModel.INotifyPropertyChanged,System.Linq.Expressions.Expression,Caliburn.Micro.INotifyPropertyChangedEx,System.Linq.Expressions.Expression)">
	<summary>
 Contructeur
 </summary>
	<param name="source">l'objet source</param>
	<param name="proprieteSource">la propriété dont on souhaite diffuser le changement</param>
	<param name="destination">l'objet destination</param>
	<param name="proprieteDestination">la propriété à réévaluer si la propriété source lève une notification de changement</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Notification.Diffusion.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
	<summary>
 Gère la réception d'événement
 </summary>
	<param name="managerType">le type</param>
	<param name="sender">l'émetteur</param>
	<param name="e">les arguments passés</param>
	<returns>le résultat du traitement</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Notification.Diffusion.Suspendre">
	<summary>
 Suspend la diffusion.
 </summary>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Notification.Diffusion.CreerDiffusion``2(System.ComponentModel.INotifyPropertyChanged,System.Linq.Expressions.Expression{System.Func{``0}},Caliburn.Micro.INotifyPropertyChangedEx,System.Linq.Expressions.Expression{System.Func{``1}})">
	<summary>
 Crée le lien entre la propriété à notifier et celle à réévaluer
 </summary>
	<param name="source">l'objet source</param>
	<param name="proprieteSource">la propriété dont on souhaite diffuser le changement</param>
	<param name="destination">l'objet destination</param>
	<param name="proprieteDestination">la propriété à réévaluer si la propriété source lève une notification de changement</param>
	<returns>l'objet diffusion résultant</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Notification.Diffusion">
	<summary>
 Classe représentant une diffusion de changement de propriété. Elle permet de lier des objets INotifyPropertyChanged ensemble.
 </summary>
	<remarks>Le but de cette classe est de créer un lien entre une propriété d'un objet source et une propriété d'un objet destination.</remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.EnumResultat">
	<summary>
 Énumération des réponses possibles aux messages utilisateurs via les popup
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Navigation.IServiceNavigation">
	<summary>
 Interface du service de navigation de l'application.
 </summary>
	<remarks></remarks>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFocusSuivant.PeutDeplacerFocusSuivant">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFocusSuivant.GetPeutNaviguerSuivant(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFocusSuivant.SetPeutNaviguerSuivant(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFocusSuivant.AllerAuProchainElementInterfaceUtilisateur(System.Windows.UIElement,System.Windows.Input.KeyEventArgs)">
	<summary>
 Va au prochain contrôle d'interface utilisateur
 </summary>
	<param name="e">événement de touche de clavier</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFocusSuivant.TextBox_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
	<summary>
 Événement déclenché lors de l'appuie de la touche "Enter" au clavier
 </summary>
	<param name="sender">Le contrpole textbox</param>
	<param name="e">L'évenement de touche clavier</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFocusSuivant.LierPeutDeplacerFocusSuivant(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFocusSuivant">
	<summary>
 Classe de gestion du comportement qui permet d'atteindre, à l'aide de la touche "Enter" le contrôle qui suit un contrôle de type Textbox
 </summary>
	<remarks>Par défaut, le comportement est activé via le fichier de styles, pour tous les textBox de l'application</remarks>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieTexte.EstActifProperty">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieTexte.LierEstActif(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieTexte.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient l'activation du comportement
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieTexte.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit l'activation du comportement
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieTexte">
	<summary>
 Classe de gestion du comportement de saisie de texte (et de blocage de certains caractères) dans un contrôle TextBox
 </summary>
	<remarks>Par défaut, le comportement est activé via le fichier de styles, pour tous les TextBoxes de l'application</remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.SourceLiaisonPopup">
	<summary>
 Classe de base pour tous les objets servant au binding (ViewModelBase et autres classes servant au binding) dans un conteneur principal.
 Cela permet de centraliser la gestion de la navigation.
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.IViewModelFactory.ObtenirInstance``1(System.String)">
	<summary>
 Obtient l'instance d'un écran d'après sa clé.
 </summary>
	<param name="cle">Clé identifiant un écran.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.IViewModelFactory">
	<summary>
 Fabrique d'écran pour l'application.
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ElementListe.Index">
	<summary>
 Obtient l'index de l'élément dans la liste appelante
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ElementListe.TypeListe">
	<summary>
 Obtient le type de liste pour configurer la fenêtre appelée
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ElementListe.IdElementRetour">
	<summary>
 Obtient ou définit l'identifiant résultant du traitement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ElementListe.#ctor(System.Int32,IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.EnumTypeListe)">
	<summary>
 Constructeur
 </summary>
	<param name="index">l'index de l'élément dans la liste appelante</param>
	<param name="typeListe">le type de liste pour configurer la fenêtre appelée</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ElementListe">
	<summary>
 Classe de transport d'un élément de liste à passer à l'appel de fenêtre popup
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.ServiceAgregateurEvenement.Instance">
	<summary>
 Obtient l'instance cournate du singleton
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.ServiceAgregateurEvenement.#ctor">
	<summary>
 Contructeur privé par défaut pour empêcher l'appel externe
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.ServiceAgregateurEvenement">
	<summary>
 Singleton de l'agrégateur d'événement pour gérer les actions Pub/Sub
 </summary>
</member><member name="E:IAFG.IA.LU.AP.BaseWPF.Commande.CommandeParametre.CanExecuteChanged">
	<summary>
 Survient lorsque la disponibilité de la commande est modifiée.
 </summary>
	<param name="sender">La commande modifiée.</param>
	<param name="e">Les paramètres détaillant l'événement.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.CommandeParametre.#ctor(System.Action{System.Object})">
	<summary>
 Crée une commande qui est toujours autorisée à être exécutée.
 </summary>
	<param name="logiqueExecution">L'action à être exécutée par la commande.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.CommandeParametre.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
	<summary>
 Crée une commande.
 </summary>
	<param name="logiqueExecution">L'action à être exécutée par la commande.</param>
	<param name="indicateurExecution">L'indicateur de statut d'autorisation d'exécution de la commande.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.CommandeParametre.CanExecute(System.Object)">
	<summary>
 Indique si la commande peut être exécutée.
 </summary>
	<param name="parametre">Le paramètre à fournir à la logique de vérification, le cas échéant.</param>
	<returns><c>true</c> si la commande peut être exécutée, <c>false</c> sinon.</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.CommandeParametre.Execute(System.Object)">
	<summary>
 Exécute la commande.
 </summary>
	<param name="parametre">Le paramètre à fournir à la logique d'exécution, le cas échéant.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.CommandeParametre.ReevaluerDisponibilite">
	<summary>
 Force une réévaluation de la disponibilite de la commande.
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Commande.CommandeParametre.ReevaluerDisponibilite(System.Object)">
	<summary>
 Force une réévaluation de la disponibilite de la commande.
 </summary>
	<param name="parametre">Le paramètre à fournir à la logique de vérification, le cas échéant.</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.BindToDisplayType.DisplayType_PropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Survient lors d'un changementd de valeur pour la propriété EstActif.
 </summary>
	<param name="dependencyObject"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFenetre.PeutDeplacerFenetre">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFenetre.GetPeutDeplacerFenetre(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFenetre.SetPeutDeplacerFenetre(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFenetre.UIElement_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
	<summary>
 Événement déclenché lors du click du contrôle
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFenetre.LierPeutDeplacerFenetre(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDeplacerFenetre">
	<summary>
 Classe de gestion du comportement qui permet de déplacer une fenêtre en cliquant un contrôle
 </summary>
	<remarks></remarks>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDecocherOption.EstActifProperty">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
	<remarks>Par défaut, le comportement est activé via le fichier de styles, pour tous les boutons radio de l'application</remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDecocherOption.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDecocherOption.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDecocherOption.LierEstActif(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
	<param name="sender">La source de l'événement</param>
	<param name="e">les paramètres de l'événement</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDecocherOption.radioBouton_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
	<summary>
 Gère les actions avant le KeyDown clavier sur le contrôle
 </summary>
	<param name="sender">La source de l'événement</param>
	<param name="e">les paramètres de l'événement</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDecocherOption">
	<summary>
 Classe de gestion du comportement de décochage du bouton radio sur le bouton Delete du clavier
 </summary>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieDevise.EstActifProperty">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieDevise.textBox_PreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
	<summary>
 Événement de gestion de la saisie au clavier
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieDevise.textBox_TextPasted(System.Object,System.Windows.DataObjectPastingEventArgs)">
	<summary>
 Gestion du copier/coller
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieDevise.LierEstActif(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
	<param name="sender">La source de l'événement</param>
	<param name="e">les paramètres de l'événement</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieDevise.IgnorerSaisie(System.String)">
	<summary>
	</summary>
	<param name="texteSaisi"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieDevise.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieDevise.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSaisieDevise">
	<summary>
 Classe de gestion du comportement de saisie numérique dans un contrôle TextBox
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDataGridSansDefilement.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété EstActif pour un élément.
 </summary>
	<param name="element"></param>
	<returns>Retourne un booléen indiquant la valeur de la propriété.</returns>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDataGridSansDefilement.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété EstActif pour un élément.
 </summary>
	<param name="element"></param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDataGridSansDefilement.EstActif_PropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Survient lors d'un changement de valeur pour la propriété EstActif.
 </summary>
	<param name="dependencyObject"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDataGridSansDefilement.ScrollViewer_MouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
	<summary>
 Survient lorsque l'utilisateur utiliser la roulette de la souris pour faire défiler l'écran au dessus d'un DataGrid.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>Permet de ne plus avaler l'événement.</remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementDataGridSansDefilement">
	<summary>
 Comportement visant à ce que les DataGrid n'avale plus les événement de défilement (mouse scroll) lorsqu'ils sont contenus dans un scroll viewer.
 </summary>
	<remarks></remarks>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Navigation.IServiceNavigationLegacy">
	<summary>
 Interface de navigation de l'application pour les besoins d'intégration au VB6.
 </summary>
	<remarks>Doit être supprimé lorsque le VB6 sera retiré.</remarks>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurBooleen`1.#ctor(`0,`0)">
	<summary>
 Constructeur
 </summary>
	<param name="valeurVrai">Définit la valeur de type générique correspondant à vrai</param>
	<param name="valeurFaux">Définit la valeur de type générique correspondant à faux</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurBooleen`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>
 Convertit la valeur booléenne vers le type générique T
 </summary>
	<param name="value">la valeur booléenne de la propriété à convertir</param>
	<param name="targetType">le type cible</param>
	<param name="parameter">le paramètre du convertisseur passé dans le XAML</param>
	<param name="culture">la culture</param>
	<returns>La valeur convertie au type générique</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurBooleen`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>
 Effectue l'opération inverse de la valeur générique vers lun booléen
 </summary>
	<param name="value">la valeur de type générique</param>
	<param name="targetType">le type cible</param>
	<param name="parameter">le paramètre du convertisseur dans le XAML</param>
	<param name="culture">la culture</param>
	<returns>le booléen résultant</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Convertisseur.ConvertisseurBooleen`1">
	<summary>
 Classe de base de convertisseur booléen vers un type générique
 </summary>
	<typeparam name="T">le type générique vers lequel on veut convertir</typeparam>
	<remarks>Cette classe de base sert par exemple pour passer d'un booléen à une valeur de visibilité</remarks>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.SourceLiaisonBase.GestionnaireDiffusion">
	<summary>
 Obtient le gestionnaire de diffusion.
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.SourceLiaisonBase.GestionnaireNotificationValidation">
	<summary>
 Obtient le gestionnaire de diffusion.
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.SourceLiaisonBase">
	<summary>
 Classe de base pour tous les objets servant au binding (ViewModelBase et autres classes servant au binding) dans le pattern MVVM.
 Cela permet de centraliser la gestion des notifications de changement et le diffuseur associé
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.BindingProxy.ContexteExterne">
	<summary>
 Obtient ou définit le contexte externe à attacher, pour permettre d'accéder à ses fonctionnalités
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.BindingProxy.CreateInstanceCore">
	<summary>
 Crée le proxy
 </summary>
	<returns>le proxy créé</returns>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.BindingProxy">
	<summary>
 Classe permettant de binder un DataContext externe à un objet ayant déjà un DataContext défini
 </summary>
	<remarks>Cette fonctionnalité est typiquement utilisée dans les Datagrids ou ItemsControls, lorsqu'on veut accéder au DataContext parent.</remarks>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.EstActifProperty">
	<summary>
 Propriété attachée pour activer le comportement
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.comboBox_PreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
	<summary>
 Gère la saisie de caractères dans le contrôle
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.comboBox_TextPasted(System.Object,System.Windows.DataObjectPastingEventArgs)">
	<summary>
 Gère le collé dans le contrôle
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.comboBox_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 On mémorise la sélection lors de l'entrée dans le contrôle, afin de gérer l'annulation
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.comboBox_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 Lorsque l'on quitte le champ, on réaffecte la valeur d'origine si requis
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.comboBox_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
	<summary>
 Gère la saisie au clavier des touches spéciales
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.LierEstActif(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Attache les événements de base du contrôle aux méthodes pour les prendre en charge
 </summary>
	<param name="sender">La source de l'événement</param>
	<param name="e">les paramètres de l'événement</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.VerifierPresenceAjoutUnique(System.Windows.Controls.ComboBox,System.String)">
	<summary>
 Vérifie la présence d'un élément avec le même début + le caractère saisi au clavier
 </summary>
	<param name="combo">le contrôle de liste</param>
	<param name="caractereCourant">le caractère en cours de saisie</param>
	<returns>l'indication de présence dans la liste</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.VerifierPresenceTexte(System.Object,System.String)">
	<summary>
 Valide que l'ajout de texte dans la zone de saisie de la liste déroulante correspond à au moins une valeur existant dans les éléments de la liste
 </summary>
	<param name="controle">la liste déroulante où on effectue l'opération en cours</param>
	<param name="texteAjoute">le texte ajouté à celui déjà saisi dans la zone de texte</param>
	<returns>l'indicateur qu'au moins une occurrence de la liste correspond à la saisie en cours</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.GetEstActif(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.SetEstActif(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.GetEstReaffecteSortie(System.Windows.DependencyObject)">
	<summary>
 Obtient la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<returns>La valeur de la propriété attachée</returns>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe.SetEstReaffecteSortie(System.Windows.DependencyObject,System.Boolean)">
	<summary>
 Définit la valeur de la propriété attachée
 </summary>
	<param name="element">le contrôle</param>
	<param name="value">La valeur à affecter à la propriété du contrôle</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Comportement.ComportementSelectionListe">
	<summary>
 Comportement commun aux contrôles de types liste déroulante
 </summary>
</member><member name="F:IAFG.IA.LU.AP.BaseWPF.Controle.Section.TitreProperty">
	<summary>
 Enregistre la propriété attachée
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Controle.Section.Titre">
	<summary>
 Obtient ou définit le titre de la section
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Controle.Section.#cctor">
	<summary>
 Constructeur par défaut
 </summary>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Controle.Section">
	<summary>
 Classe de section visuelle
 </summary>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Evenement.DonneeModifiee`1.Donnee">
	<summary>
 Obtient la donnée modifiée
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Evenement.DonneeModifiee`1.#ctor(`0)">
	<summary>
 Constructeur
 </summary>
	<param name="donnee">la donnée modifiée</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Evenement.DonneeModifiee`1">
	<summary>
 Classe générique de signalement de modification de donnée
 </summary>
	<typeparam name="T">le type de donnée modifiée</typeparam>
	<remarks></remarks>
</member><member name="P:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreConfiguration.EtiquetteType">
	<summary>
 Obtient l'étiquette type pour configurer l'affichage ad hoc
 </summary>
</member><member name="M:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreConfiguration.#ctor(System.String)">
	<summary>
 Constructeur
 </summary>
	<param name="etiquette">l'étiquette utile à la configuration</param>
</member><member name="T:IAFG.IA.LU.AP.BaseWPF.Services.Fenetre.ParametreConfiguration">
	<summary>
 Classe de transport des paramètres pour le service d'appel aux popups de configuration
 </summary>
</member>
</members>
</doc>